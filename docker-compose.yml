version: '3'
services:
  dashy:
    image: 'lissy93/dashy:latest'
    container_name: my-dashboard
    ports:
        - '80:80'
    volumes:
        - '/home/igor/containers/dashy/my-local-conf.yml:/app/public/conf.yml'
    restart: unless-stopped

  # jellyfin:
  #   image: jellyfin/jellyfin
  #   container_name: jellyfin
  #   volumes:
  #     - /home/igor/containers/jellyfin/config:/config
  #     - /home/igor/containers/jellyfin/cache:/cache
  #     - /home/igor/containers/jellyfin/media:/media
  #   ports:
  #     - "8096:8096"
  #   environment:
  #     - USER_UID=1000
  #     - USER_GID=1000
  #   restart: unless-stopped

  # gitea:
  #   image: gitea/gitea
  #   container_name: gitea
  #   volumes:
  #     - /home/igor/containers/gitea:/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   ports:
  #     - "3000:3000"
  #     - "222:22"
  #   environment:
  #     - USER_UID=1000
  #     - USER_GID=1000
  #   restart: unless-stopped

  # immich-server:
  #   container_name: immich_server
  #   image:  ghcr.io/immich-app/immich-server:release
  #   command: ['start.sh', 'immich']
  #   volumes:
  #     - /home/igor/containers/immich/:/usr/src/app/upload
  #     - /home/igor/test:/usr/src/app/external:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   env_file:
  #     - new.env
  #   ports:
  #     - 2283:3001
  #   depends_on:
  #     - immich-redis
  #     - immich-database
  #   restart: unless-stopped

  # immich-microservices:
  #   container_name: immich_microservices
  #   image: ghcr.io/immich-app/immich-server:release
  #   command: ['start.sh', 'microservices']
  #   volumes:
  #     - /home/igor/containers/immich/:/usr/src/app/upload
  #     - /home/igor/test:/usr/src/app/external:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   env_file:
  #     - new.env
  #   depends_on:
  #     - immich-redis
  #     - immich-database
  #   restart: unless-stopped

  # immich-machine-learning:
  #   container_name: immich_machine_learning
  #   image: ghcr.io/immich-app/immich-machine-learning:release
  #   volumes:
  #     - model-cache:/cache
  #   env_file:
  #     - new.env
  #   restart: unless-stopped

  # immich-redis:
  #   container_name: immich_redis
  #   image: registry.hub.docker.com/library/redis:6.2-alpine@sha256:51d6c56749a4243096327e3fb964a48ed92254357108449cb6e23999c37773c5
  #   restart: unless-stopped

  # immich-database:
  #   container_name: immich_postgres
  #   image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
  #   environment:
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     POSTGRES_USER: ${DB_USERNAME}
  #     POSTGRES_DB: ${DB_DATABASE_NAME}
  #   volumes:
  #     - pgdata:/var/lib/postgresql/data
  #   restart: unless-stopped

  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   restart: unless-stopped

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - 1000:3000
    volumes:
      - grafana-storage:/var/lib/grafana
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - /home/igor/containers/prometheus:/etc/prometheus    
    restart: unless-stopped

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    pid: host
    ports:
      - "9100:9100"
    volumes:
      - '/:/host:ro,rslave'      
    restart: unless-stopped

volumes:
  pgdata:
  model-cache:
  grafana-storage:
  prometheus_data:
